{"version":3,"file":"static/js/5969.e9f8b1ae.chunk.js","mappings":"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","sources":["views/utilities/product/add-product.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from \"react\";\r\nimport MainCard from \"ui-component/cards/MainCard\";\r\nimport InputLabel from \"ui-component/extended/Form/InputLabel\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  MenuItem,\r\n  Select,\r\n  Stack,\r\n  TextField,\r\n  CircularProgress,\r\n} from \"@mui/material\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\";\r\nimport ProductApi from \"../../../api/product.api\";\r\nimport { toast } from \"react-hot-toast\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CategoryApi from \"../../../api/category.api\"; //\r\nimport { updateAllCategory } from \"../../../redux/redux-slice/category.slice\";\r\nimport SubCategoryApi from \"../../../api/sub-category.api\";\r\nimport { updateAllSubCategory } from \"../../../redux/redux-slice/sub-category.slice\";\r\n\r\nfunction App() {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const ref = useRef();\r\n  const productApi = new ProductApi();\r\n  const [file, setFile] = useState([]);\r\n  const [fileName, setFileName] = useState([]);\r\n  const [file1, setFile1] = useState([]);\r\n  const [fileName1, setFileName1] = useState();\r\n  const [name, setName] = React.useState(\"\");\r\n  const [price, setPrice] = React.useState();\r\n  const [quantity, setQuantity] = React.useState(\"\");\r\n  const [active, setActive] = React.useState(true);\r\n  const [category, setCategory] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [franchisePrice, setFranchisePrice] = useState();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [bestSeller, setBestSeller] = React.useState(false);\r\n  const [newArrival, setNewArrival] = React.useState(false);\r\n  const [bestDeal, setBestDeal] = React.useState(false);\r\n  const [features, setFeatures] = useState();\r\n  const [mainVarient, setMainVerient] = React.useState(\"\");\r\n  const [salePrice, setSalePrice] = React.useState();\r\n  const [message, setMessage] = React.useState(\"\");\r\n  const [frMessage, setFrMessage] = React.useState(\"\");\r\n  // const [variant, setVariant] = React.useState([]);\r\n  const [stateComission, setStateComission] = React.useState('');\r\n  const [districtComission, setDistrictComission] = React.useState(\"\");\r\n  const [blockComission, setBlockComission] = React.useState(\"\");\r\n  const [clusterComission, setClusterComission] = React.useState(\"\");\r\n\r\n  function handleChange(event) {\r\n    setFile(event.target.files[0]);\r\n    setFileName(event.target.value);\r\n  }\r\n  function handleChange1(event) {\r\n    setFile1(event.target.files);\r\n    setFileName1(event.target.value);\r\n  }\r\n\r\n  const handleChangeDescription = (content, delta, source, editor) => {\r\n    setDescription(content);\r\n  };\r\n\r\n  const handleChangeFeatures = (content, delta, source, editor) => {\r\n    setFeatures(content);\r\n  };\r\n\r\n  async function handleSubmit(event) {\r\n    setIsLoading(true);\r\n    event.preventDefault();\r\n    var formdata = new FormData();\r\n    formdata.append(\"name\", name);\r\n    formdata.append(\"description\", description);\r\n    formdata.append(\"feature\", features);\r\n    formdata.append(\"price\", price);\r\n    formdata.append(\"categoryId\", category);\r\n    formdata.append(\"subCategoryId\", mainVarient);\r\n    formdata.append(\"quantity\", quantity);\r\n    formdata.append(\"active\", active);\r\n    formdata.append(\"stateCommission\", stateComission);\r\n    formdata.append(\"districtCommission\", districtComission);\r\n    formdata.append(\"blockCommission\", blockComission);\r\n    formdata.append(\"clusterCommission\", clusterComission);\r\n    // Append each item in the variant array to the FormData object\r\n    formdata.append(\"variant\", []);\r\n    formdata.append(\"img\", file);\r\n    for (const key of Object.keys(file1)) {\r\n      formdata.append(`images`, file1[key]);\r\n    }\r\n    formdata.append(\"frenchisePrice\", franchisePrice);\r\n    // formdata.append(\"discount\", discount);\r\n    formdata.append(\"discountPrice\", salePrice);\r\n    formdata.append(\"isNew\", newArrival);\r\n    formdata.append(\"isBestSeller\", bestSeller);\r\n    formdata.append(\"isBestDeal\", bestDeal);\r\n    const addBannerResponse = await productApi.addProduct(formdata);\r\n    if (addBannerResponse && addBannerResponse?.data?.code === 200) {\r\n      toast.success(`Added successsfully`);\r\n      navigate(\"/product\", { replace: true });\r\n    } else {\r\n      return toast.error(`Something went wrong!`);\r\n    }\r\n  }\r\n\r\n  const categoryApi = new CategoryApi();\r\n  const rows = useSelector((state) => state.category.Category);\r\n\r\n  const getAllCategory = useCallback(async () => {\r\n    try {\r\n      const categories = await categoryApi.getAllCategory();\r\n      if (!categories || !categories.data.data) {\r\n        return toast.error(\"no available\");\r\n      } else {\r\n        dispatch(updateAllCategory(categories.data.data));\r\n        return;\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(\"Something went wrong\");\r\n      throw error;\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    getAllCategory();\r\n  }, []);\r\n\r\n  const subCategoryApi = new SubCategoryApi();\r\n  const rowses = useSelector((state) => state.subCategory.SubCategory);\r\n\r\n  async function handleSetSubCategory(event) {\r\n    event.preventDefault();\r\n    const subCategories = await subCategoryApi.getSubCategoryByCategoryId({\r\n      categoryId: category,\r\n    });\r\n    if (subCategories && subCategories?.data?.code === 200) {\r\n      return dispatch(updateAllSubCategory(subCategories.data.data));\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  const checkMarketPrice = () => {\r\n    if (salePrice < price) {\r\n      setMessage(\"\");\r\n    } else {\r\n      setMessage(\r\n        <span style={{ color: \"red\" }}>Selling price doesn't greater than (Market Retail Price)MRP</span>\r\n      );\r\n    }\r\n  };\r\n\r\n  const checkFranchisePrice = () => {\r\n    if (franchisePrice < price) {\r\n      setFrMessage(\"\");\r\n    } else {\r\n      setFrMessage(\r\n        <span style={{ color: \"red\" }}>\r\n          Franchise price doesn't greater than (Market Retail Price)MRP\r\n        </span>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <MainCard title=\"Add Product\">\r\n      <form>\r\n        <Grid container spacing={gridSpacing}>\r\n          <Grid item xs={6} md={6}>\r\n            <Stack>\r\n              <InputLabel required>Product Name</InputLabel>\r\n              <TextField\r\n                fullWidth\r\n                id=\"product\"\r\n                inputProps={{ maxLength: 30 }}\r\n                name=\"product\"\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n                placeholder=\"Enter product name\"\r\n              />\r\n            </Stack>\r\n          </Grid>\r\n          <Grid item xs={6} md={6}>\r\n            <Stack>\r\n              <InputLabel required>Market Retail Price (MRP)</InputLabel>\r\n              <TextField\r\n                fullWidth\r\n                id=\"price\"\r\n                name=\"price\"\r\n                onInput={(e) => {\r\n                  e.target.value = Math.max(0, parseInt(e.target.value))\r\n                    .toString()\r\n                    .slice(0, 6);\r\n                }}\r\n                type=\"number\"\r\n                value={price}\r\n                onChange={(e) => setPrice(parseFloat(e.target.value))}\r\n                placeholder=\"Enter product price\"\r\n              />\r\n            </Stack>\r\n          </Grid>\r\n          <Grid item xs={6} md={6}>\r\n            <Stack>\r\n              <InputLabel required>Selling Price</InputLabel>\r\n              <TextField\r\n                fullWidth\r\n                id=\"sale\"\r\n                name=\"sale\"\r\n                onInput={(e) => {\r\n                  e.target.value = Math.max(0, parseInt(e.target.value))\r\n                    .toString()\r\n                    .slice(0, 6);\r\n                }}\r\n                type=\"number\"\r\n                value={salePrice}\r\n                onChange={(e) => setSalePrice(parseFloat(e.target.value))}\r\n                onBlur={checkMarketPrice}\r\n                placeholder=\"Enter Market price\"\r\n              />\r\n              {message}\r\n            </Stack>\r\n          </Grid>\r\n          <Grid item xs={6} md={6}>\r\n            <Stack>\r\n              <InputLabel required>Franchise Price</InputLabel>\r\n              <TextField\r\n                fullWidth\r\n                id=\"price\"\r\n                name=\"price\"\r\n                onInput={(e) => {\r\n                  e.target.value = Math.max(0, parseInt(e.target.value))\r\n                    .toString()\r\n                    .slice(0, 6);\r\n                }}\r\n                type=\"number\"\r\n                value={franchisePrice}\r\n                onChange={(e) => setFranchisePrice(parseFloat(e.target.value))}\r\n                onBlur={checkFranchisePrice}\r\n                placeholder=\"Enter Franchise price\"\r\n              />\r\n              {frMessage}\r\n            </Stack>\r\n          </Grid>\r\n          <Grid item xs={6} md={6}>\r\n            <Stack>\r\n              <InputLabel required>Quantity</InputLabel>\r\n              <TextField\r\n                fullWidth\r\n                id=\"quantity\"\r\n                name=\"quantity\"\r\n                onInput={(e) => {\r\n                  e.target.value = Math.max(0, parseInt(e.target.value))\r\n                    .toString()\r\n                    .slice(0, 3);\r\n                }}\r\n                value={quantity}\r\n                onChange={(e) => setQuantity(e.target.value)}\r\n                placeholder=\"Enter quantity\"\r\n              />\r\n            </Stack>\r\n          </Grid>\r\n          <Grid item xs={6} md={6}>\r\n            <Stack>\r\n              <InputLabel required>State Comission</InputLabel>\r\n              <TextField\r\n                fullWidth\r\n                id=\"state-commission\"\r\n                name=\"state-commission\"\r\n                onInput={(e) => {\r\n                  e.target.value = Math.max(0, parseInt(e.target.value))\r\n                    .toString()\r\n                    .slice(0, 6);\r\n                }}\r\n                value={stateComission}\r\n                onChange={(e) => setStateComission(e.target.value)}\r\n                placeholder=\"Enter State Comission\"\r\n              />\r\n            </Stack>\r\n          </Grid>\r\n          <Grid item xs={6} md={6}>\r\n            <Stack>\r\n              <InputLabel required>District Comission</InputLabel>\r\n              <TextField\r\n                fullWidth\r\n                id=\"district-commission\"\r\n                name=\"district-commission\"\r\n                onInput={(e) => {\r\n                  e.target.value = Math.max(0, parseInt(e.target.value))\r\n                    .toString()\r\n                    .slice(0, 6);\r\n                }}\r\n                value={districtComission}\r\n                onChange={(e) => setDistrictComission(e.target.value)}\r\n                placeholder=\"Enter District Comission\"\r\n              />\r\n            </Stack>\r\n          </Grid>\r\n          <Grid item xs={6} md={6}>\r\n            <Stack>\r\n              <InputLabel required>Block Comission</InputLabel>\r\n              <TextField\r\n                fullWidth\r\n                id=\"block-commission\"\r\n                name=\"block-commission\"\r\n                onInput={(e) => {\r\n                  e.target.value = Math.max(0, parseInt(e.target.value))\r\n                    .toString()\r\n                    .slice(0, 6);\r\n                }}\r\n                value={blockComission}\r\n                onChange={(e) => setBlockComission(e.target.value)}\r\n                placeholder=\"Enter BLock Comission\"\r\n              />\r\n            </Stack>\r\n          </Grid>\r\n          <Grid item xs={6} md={6}>\r\n            <Stack>\r\n              <InputLabel required>Cluster Comission</InputLabel>\r\n              <TextField\r\n                fullWidth\r\n                id=\"cluster-commission\"\r\n                name=\"cluster-commission\"\r\n                onInput={(e) => {\r\n                  e.target.value = Math.max(0, parseInt(e.target.value))\r\n                    .toString()\r\n                    .slice(0, 6);\r\n                }}\r\n                value={clusterComission}\r\n                onChange={(e) => setClusterComission(e.target.value)}\r\n                placeholder=\"Enter cluster Comission\"\r\n              />\r\n            </Stack>\r\n          </Grid>\r\n          <Grid item xs={6} md={6}>\r\n            <Stack>\r\n              <InputLabel required>Active</InputLabel>\r\n              <Select\r\n                id=\"active\"\r\n                name=\"active\"\r\n                value={active}\r\n                onChange={(e) => setActive(e.target.value)}\r\n              >\r\n                <MenuItem value=\"true\">True</MenuItem>\r\n                <MenuItem value=\"false\">False</MenuItem>\r\n              </Select>\r\n            </Stack>\r\n          </Grid>\r\n          {/* <Grid item xs={6} md={6}>\r\n            <Stack>\r\n              <InputLabel required>Variant</InputLabel>\r\n              <TextField\r\n                fullWidth\r\n                id=\"quantity\"\r\n                name=\"quantity\"\r\n                value={input}\r\n                onChange={handleInputChange}\r\n                onKeyDown={handleInputKeyDown}\r\n              />\r\n              <br />\r\n              <div>\r\n                {tags.map((tag, index) => (\r\n                  <span>\r\n                    <span\r\n                      key={index}\r\n                      onClick={() => handleTagClick(index)}\r\n                      style={{ border: \"1px solid\", borderRadius: \"5px\" }}\r\n                    >\r\n                      &nbsp; {tag} <span style={{ color: \"red\" }}>x</span>{\" \"}\r\n                      &nbsp;\r\n                    </span>\r\n                    &nbsp; &nbsp;\r\n                  </span>\r\n                ))}\r\n              </div>\r\n            </Stack>\r\n          </Grid> */}\r\n          <Grid item xs={6} md={6}>\r\n            <Stack>\r\n              <InputLabel required>Choose Category</InputLabel>\r\n              <Select\r\n                id=\"active\"\r\n                name=\"active\"\r\n                value={category}\r\n                onChange={(e) => setCategory(e.target.value)}\r\n                onBlur={handleSetSubCategory}\r\n              >\r\n                {rows.map((row, i) => {\r\n                  return (\r\n                    <MenuItem key={i} value={row.CategoryID}>\r\n                      {row.Name}\r\n                    </MenuItem>\r\n                  );\r\n                })}\r\n              </Select>\r\n            </Stack>\r\n          </Grid>\r\n          <Grid item xs={6} md={6}>\r\n            {rowses.length > 0 ? (\r\n              <Stack>\r\n                <InputLabel required>Sub Category</InputLabel>\r\n                <Select\r\n                  id=\"mainVarient\"\r\n                  name=\"mainVarient\"\r\n                  value={mainVarient}\r\n                  placeholder=\"Select Sub Category\"\r\n                  onChange={(e) => setMainVerient(e.target.value)}\r\n                  // renderValue={\r\n                  //   category !== \"\" ? undefined : () => \"--Select SubCategory--\"\r\n                  // }\r\n                >\r\n                  {rowses.map((row, i) => {\r\n                    return (\r\n                      <MenuItem key={i} value={row.SubCategoryID}>\r\n                        {row.Name}\r\n                      </MenuItem>\r\n                    );\r\n                  })}\r\n                </Select>\r\n              </Stack>\r\n            ) : (\r\n              <> </>\r\n            )}\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <Stack>\r\n              <InputLabel required>Description</InputLabel>\r\n              <ReactQuill\r\n                className=\"quill-editor\"\r\n                size={`md`}\r\n                theme=\"snow\"\r\n                value={description}\r\n                onChange={handleChangeDescription}\r\n              />\r\n            </Stack>\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <Stack>\r\n              <InputLabel required>Features</InputLabel>\r\n              <ReactQuill\r\n                className=\"quill-editor\"\r\n                size={`md`}\r\n                theme=\"snow\"\r\n                value={features}\r\n                onChange={handleChangeFeatures}\r\n              />\r\n            </Stack>\r\n          </Grid>\r\n          <Grid item xs={4} md={4}>\r\n            <Stack>\r\n              <InputLabel required>Best Seller</InputLabel>\r\n              <Select\r\n                id=\"best-seller\"\r\n                name=\"best-seller\"\r\n                value={bestSeller}\r\n                onChange={(e) => setBestSeller(e.target.value)}\r\n              >\r\n                <MenuItem value=\"true\">True</MenuItem>\r\n                <MenuItem value=\"false\">False</MenuItem>\r\n              </Select>\r\n            </Stack>\r\n          </Grid>\r\n          <Grid item xs={4} md={4}>\r\n            <Stack>\r\n              <InputLabel required>New Arrival</InputLabel>\r\n              <Select\r\n                id=\"new-arrival\"\r\n                name=\"new-arrival\"\r\n                value={newArrival}\r\n                onChange={(e) => setNewArrival(e.target.value)}\r\n              >\r\n                <MenuItem value=\"true\">True</MenuItem>\r\n                <MenuItem value=\"false\">False</MenuItem>\r\n              </Select>\r\n            </Stack>\r\n          </Grid>\r\n          <Grid item xs={4} md={4}>\r\n            <Stack>\r\n              <InputLabel required>Best Deal</InputLabel>\r\n              <Select\r\n                id=\"best-deal\"\r\n                name=\"best-deal\"\r\n                value={bestDeal}\r\n                onChange={(e) => setBestDeal(e.target.value)}\r\n              >\r\n                <MenuItem value=\"true\">True</MenuItem>\r\n                <MenuItem value=\"false\">False</MenuItem>\r\n              </Select>\r\n            </Stack>\r\n          </Grid>\r\n          {/* <Grid item xs={6} md={6}>\r\n            <Stack>\r\n              <InputLabel required>Discount</InputLabel>\r\n              <Select\r\n                id=\"discount\"\r\n                name=\"discount\"\r\n                value={discount}\r\n                onChange={(e) => setDiscount(e.target.value)}\r\n              >\r\n                <MenuItem value=\"true\">True</MenuItem>\r\n                <MenuItem value=\"false\">False</MenuItem>\r\n              </Select>\r\n            </Stack>\r\n          </Grid>\r\n          {discount ? (\r\n            <Grid item xs={6} md={6}>\r\n              <Stack>\r\n                <InputLabel required>Discount Percent</InputLabel>\r\n                <TextField\r\n                  fullWidth\r\n                  id=\"price\"\r\n                  name=\"price\"\r\n                  onInput={(e) => {\r\n                    e.target.value = Math.max(0, parseFloat(e.target.value))\r\n                      .toString()\r\n                      .slice(0, 2);\r\n                  }}\r\n                  type=\"number\"\r\n                  value={discountPrice}\r\n                  onChange={(e) => setDiscountPrice(e.target.value)}\r\n                  placeholder=\"Enter product price\"\r\n                />\r\n              </Stack>\r\n            </Grid>\r\n          ) : (\r\n            <></>\r\n          )} */}\r\n        </Grid>\r\n        <br />\r\n        <Grid container spacing={gridSpacing}>\r\n          <Grid item xs={6} md={6}>\r\n            <Stack>\r\n              <InputLabel>Choose Thumbnail Image</InputLabel>\r\n              <div className=\"custom-file\">\r\n                <input\r\n                  type=\"file\"\r\n                  className=\"custom-file-input\"\r\n                  id=\"thumbnail\"\r\n                  accept=\"image/png, image/jpeg\"\r\n                  onChange={handleChange}\r\n                  value={fileName}\r\n                  required\r\n                />\r\n                <label className=\"custom-file-label\" for=\"thumbnail\">\r\n                  {fileName}\r\n                </label>\r\n              </div>\r\n            </Stack>\r\n          </Grid>\r\n          <Grid item xs={6} md={6}>\r\n            <Stack>\r\n              <InputLabel>Choose Multiple Image</InputLabel>\r\n              <div className=\"custom-file\">\r\n                <input\r\n                  type=\"file\"\r\n                  className=\"custom-file-input\"\r\n                  id=\"thumbnail\"\r\n                  multiple\r\n                  accept=\"image/png, image/jpeg\"\r\n                  onChange={handleChange1}\r\n                  value={fileName1}\r\n                  required\r\n                />\r\n                <label className=\"custom-file-label\" for=\"thumbnail\">\r\n                  {fileName1}\r\n                </label>\r\n              </div>\r\n            </Stack>\r\n          </Grid>\r\n        </Grid>\r\n        <br></br>\r\n        <center>\r\n          {isLoading ? (\r\n            <CircularProgress />\r\n          ) : (\r\n            <Button variant=\"contained\" onClick={handleSubmit}>\r\n              Add Product\r\n            </Button>\r\n          )}\r\n        </center>\r\n      </form>\r\n    </MainCard>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"names":["navigate","useNavigate","dispatch","useDispatch","productApi","useRef","ProductApi","useState","file","setFile","fileName","setFileName","file1","setFile1","fileName1","setFileName1","React","name","setName","price","setPrice","quantity","setQuantity","active","setActive","category","setCategory","description","setDescription","franchisePrice","setFranchisePrice","isLoading","setIsLoading","bestSeller","setBestSeller","newArrival","setNewArrival","bestDeal","setBestDeal","features","setFeatures","mainVarient","setMainVerient","salePrice","setSalePrice","message","setMessage","frMessage","setFrMessage","stateComission","setStateComission","districtComission","setDistrictComission","blockComission","setBlockComission","clusterComission","setClusterComission","event","preventDefault","formdata","FormData","append","Object","keys","key","addProduct","addBannerResponse","data","code","toast","replace","categoryApi","CategoryApi","rows","useSelector","state","Category","getAllCategory","useCallback","categories","updateAllCategory","console","error","useEffect","subCategoryApi","SubCategoryApi","rowses","subCategory","SubCategory","getSubCategoryByCategoryId","categoryId","subCategories","updateAllSubCategory","title","container","spacing","gridSpacing","item","xs","md","required","fullWidth","id","inputProps","maxLength","value","onChange","e","target","placeholder","onInput","Math","max","parseInt","toString","slice","type","parseFloat","onBlur","style","color","map","row","i","CategoryID","Name","length","SubCategoryID","className","size","theme","content","delta","source","editor","accept","files","for","multiple","variant","onClick"],"sourceRoot":""}