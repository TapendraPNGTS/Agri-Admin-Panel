{"version":3,"file":"static/js/943.9355cb13.chunk.js","mappings":"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","sources":["views/utilities/HRM/attendance/attendence.js"],"sourcesContent":["import * as React from \"react\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TablePagination from \"@mui/material/TablePagination\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Card from \"@mui/material/Card\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport { Button, Grid } from \"@mui/material\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport MainCard from \"ui-component/cards/MainCard\";\r\nimport { Chip, Typography } from \"@mui/material\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nexport default function Attenance() {\r\n  const [page, setPage] = React.useState(0);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  const [rows, setRows] = useState(\"\");\r\n\r\n  function getAllAttendence() {\r\n    var myHeaders = new Headers();\r\n    myHeaders.append(\"authkey\", process.env.REACT_APP_AUTH_KEY);\r\n    myHeaders.append(\r\n      \"Authorization\",\r\n      \"Bearer \" + localStorage.getItem(\"token\")\r\n    );\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n    var raw = JSON.stringify({\r\n      adminId: localStorage.getItem(\"userId\"),\r\n    });\r\n    var requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n    fetch(`${process.env.REACT_APP_API_URL}getAllAttendence`, requestOptions)\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        setRows(result.data);\r\n      })\r\n      .catch((error) => console.log(\"error\", error));\r\n  }\r\n\r\n  useEffect(() => {\r\n    getAllAttendence();\r\n  }, []);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  function formatDate(date) {\r\n    return new Date(date).toLocaleString(\"en-us\", {\r\n      day: \"numeric\",\r\n      month: \"short\",\r\n      year: \"numeric\",\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <TextField\r\n        id=\"outlined-search\"\r\n        label=\"Search field\"\r\n        type=\"search\"\r\n        onChange={(e) => {\r\n          setSearch(e.target.value);\r\n        }}\r\n      />\r\n\r\n      <MainCard\r\n        title={\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n            spacing={gridSpacing}\r\n          >\r\n            <Grid item>\r\n              <Typography variant=\"h3\">Attendance List</Typography>\r\n            </Grid>\r\n\r\n            {/* <Grid item>\r\n              <Button\r\n                variant=\"outlined\"\r\n                onClick={(e) => {\r\n                  navigate(\"/add-product\");\r\n                }}\r\n                startIcon={<AddIcon />}\r\n              >\r\n                Add Product\r\n              </Button>\r\n            </Grid> */}\r\n          </Grid>\r\n        }\r\n        content={false}\r\n      >\r\n        {rows ? (\r\n          <Card>\r\n            <Grid\r\n              container\r\n              alignItems=\"center\"\r\n              justifyContent=\"space-between\"\r\n              spacing={gridSpacing}\r\n            >\r\n              <Grid item></Grid>\r\n            </Grid>\r\n            <Paper sx={{ width: \"100%\", overflow: \"hidden\" }}>\r\n              <TableContainer sx={{ maxHeight: 540 }}>\r\n                <Table stickyHeader aria-label=\"sticky table\" id=\"my-table\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell sx={{ pl: 3 }}>S. No.</TableCell>\r\n                      <TableCell>Start Date</TableCell>\r\n                      <TableCell>End Date</TableCell>\r\n                      <TableCell>Name</TableCell>\r\n                      <TableCell>Email</TableCell>\r\n                      <TableCell>Status </TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {rows\r\n                      .filter((row) =>\r\n                        search === \"\"\r\n                          ? row\r\n                          : row.Title.toLowerCase().includes(\r\n                              search.toLowerCase()\r\n                            )\r\n                      )\r\n\r\n                      .slice(\r\n                        page * rowsPerPage,\r\n                        page * rowsPerPage + rowsPerPage\r\n                      )\r\n                      .map((row, index) => {\r\n                        return (\r\n                          <TableRow\r\n                            hover\r\n                            role=\"checkbox\"\r\n                            tabIndex={-1}\r\n                            key={row.code}\r\n                          >\r\n                            <TableCell sx={{ pl: 3 }} align=\"start\">\r\n                              {index + 1}\r\n                            </TableCell>\r\n                            <TableCell>{formatDate(row.StartDate)}</TableCell>\r\n                            <TableCell>{formatDate(row.EndDate)}</TableCell>\r\n                            <TableCell align=\"start\">{row.StaffID.UserName}</TableCell>\r\n                            <TableCell align=\"start\">{row.StaffID.Email}</TableCell>\r\n                            <TableCell align=\"start\">\r\n                              {row.Status ? (\r\n                                <Chip\r\n                                  label=\"ON\"\r\n                                  color=\"success\"\r\n                                  size=\"small\"\r\n                                />\r\n                              ) : (\r\n                                <Chip\r\n                                  label=\"OFF\"\r\n                                  chipcolor=\"orange\"\r\n                                  size=\"small\"\r\n                                />\r\n                              )}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        );\r\n                      })}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n              <TablePagination\r\n                rowsPerPageOptions={[10, 20, 100]}\r\n                component=\"div\"\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={handleChangeRowsPerPage}\r\n              />\r\n            </Paper>\r\n          </Card>\r\n        ) : (\r\n          <>\r\n            <br></br>\r\n            <h5 className=\"text-center\">Please Wait Data Loading...</h5>\r\n          </>\r\n        )}\r\n      </MainCard>\r\n    </>\r\n  );\r\n}\r\n"],"names":["Attenance","React","page","setPage","useState","search","setSearch","rowsPerPage","setRowsPerPage","rows","setRows","useEffect","myHeaders","Headers","append","process","localStorage","getItem","requestOptions","method","headers","body","JSON","stringify","adminId","redirect","fetch","then","response","json","result","data","catch","error","console","log","getAllAttendence","formatDate","date","Date","toLocaleString","day","month","year","id","label","type","onChange","e","target","value","title","container","alignItems","justifyContent","spacing","gridSpacing","item","variant","content","sx","width","overflow","maxHeight","stickyHeader","pl","filter","row","Title","toLowerCase","includes","slice","map","index","hover","role","tabIndex","align","StartDate","EndDate","StaffID","UserName","Email","Status","color","size","chipcolor","code","rowsPerPageOptions","component","count","length","onPageChange","event","newPage","onRowsPerPageChange","className"],"sourceRoot":""}