{"version":3,"file":"static/js/717.86f0a16f.chunk.js","mappings":"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","sources":["ui-component/extended/Form/InputLabel.js","views/utilities/Date-Formet/date-formet.js","views/utilities/HRM/holiday/add-holiday.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\n// material-ui\nimport { experimentalStyled as styled } from '@mui/material/styles';\nimport { InputLabel as MuiInputLabel } from '@mui/material';\n\nconst BInputLabel = styled((props) => <MuiInputLabel {...props} />, {\n    shouldForwardProp: (prop) => prop !== 'horizontal'\n})(({ theme, horizontal }) => ({\n    color: theme.palette.text.primary,\n    fontWeight: 500,\n    marginBottom: horizontal ? 0 : 8\n}));\n\nconst InputLabel = ({ children, horizontal, ...others }) => (\n    <BInputLabel horizontal={horizontal} {...others}>\n        {children}\n    </BInputLabel>\n);\n\nInputLabel.propTypes = {\n    children: PropTypes.node,\n    horizontal: PropTypes.bool\n};\n\nInputLabel.defaultProps = {\n    horizontal: false\n};\n\nexport default InputLabel;\n","const formatDate = (date) => {\r\n  const options = {\r\n    timeZone: \"Asia/Kolkata\",\r\n    year: \"numeric\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n    hour: \"numeric\",\r\n    minute: \"2-digit\",\r\n    hour12: true,\r\n  };\r\n\r\n  const currentDate = new Date();\r\n  const formattedDateAndTime = currentDate.toLocaleString(\"en-IN\", options);\r\n};\r\n\r\nexport default formatDate;\r\n","import React, { useState } from \"react\";\r\nimport MainCard from \"ui-component/cards/MainCard\";\r\nimport InputLabel from \"ui-component/extended/Form/InputLabel\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  MenuItem,\r\n  Select,\r\n  Stack,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport formatDate from \"../../Date-Formet/date-formet\"\r\nfunction App() {\r\n  const navigate = useNavigate();\r\n  const [name, setName] = React.useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [selectedDate, setSelectedDate] = useState(null);\r\n  React.useEffect(() => {}, []);\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    setIsLoading(true);\r\n    var myHeaders = new Headers();\r\n    myHeaders.append(\"authkey\", process.env.REACT_APP_AUTH_KEY);\r\n    myHeaders.append(\r\n      \"Authorization\",\r\n      \"Bearer \" + localStorage.getItem(\"token\")\r\n    );\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n    var raw = JSON.stringify({\r\n      adminId: localStorage.getItem(\"userId\"),\r\n      occasion: name,\r\n      date: selectedDate,\r\n    });\r\n    var requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_API_URL}addHoliday`, requestOptions)\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        if (result.code === 200) {\r\n          navigate(\"/holidays\");\r\n          toast.success(\"Added Successfully\", {\r\n            position: toast.POSITION.TOP_CENTER,\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n          });\r\n        } else {\r\n          setIsLoading(false);\r\n        }\r\n      })\r\n      .catch((error) => {});\r\n  }\r\n\r\n  const handleDateChange = (date) => {\r\n    {formatDate(setSelectedDate(date))};\r\n  };\r\n\r\n  return (\r\n    <MainCard title=\"Add Holiday\">\r\n      <form action=\"#\" onSubmit={handleSubmit}>\r\n        <Grid container spacing={gridSpacing}>\r\n          <Grid item xs={6} md={6}>\r\n            <Stack>\r\n              <InputLabel required>Choose Date</InputLabel>\r\n              <DatePicker\r\n                label=\"Select a date\"\r\n                selected={selectedDate}\r\n                onChange={handleDateChange}\r\n                dateFormat=\"dd/MM/yyyy\" // Customize date format as needed\r\n              />\r\n              <p>\r\n                Selected Date:{\" \"}\r\n                {selectedDate ? selectedDate.toLocaleDateString() : \"None\"}\r\n              </p>\r\n            </Stack>\r\n          </Grid>\r\n          <Grid item xs={6} md={6}>\r\n            <Stack>\r\n              <InputLabel required>Occasion</InputLabel>\r\n              <TextField\r\n                fullWidth\r\n                id=\"occasion\"\r\n                name=\"occasion\"\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n                placeholder=\"Enter Occasion\"\r\n              />\r\n            </Stack>\r\n          </Grid>\r\n        </Grid>\r\n        <br />\r\n        <center>\r\n          {isLoading ? (\r\n            <Spinner animation=\"grow\" />\r\n          ) : (\r\n            <Button variant=\"contained\" type=\"submit\">\r\n              Add Holiday\r\n            </Button>\r\n          )}\r\n        </center>\r\n      </form>\r\n    </MainCard>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"names":["BInputLabel","styled","props","shouldForwardProp","prop","theme","horizontal","color","palette","text","primary","fontWeight","marginBottom","InputLabel","children","others","defaultProps","date","Date","toLocaleString","timeZone","year","month","day","hour","minute","hour12","navigate","useNavigate","React","name","setName","useState","isLoading","setIsLoading","selectedDate","setSelectedDate","MainCard","title","action","onSubmit","event","preventDefault","myHeaders","Headers","append","process","localStorage","getItem","requestOptions","method","headers","body","JSON","stringify","adminId","occasion","redirect","fetch","then","response","json","result","code","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","catch","error","Grid","container","spacing","gridSpacing","item","xs","md","Stack","required","label","selected","onChange","formatDate","dateFormat","toLocaleDateString","TextField","fullWidth","id","value","e","target","placeholder","Spinner","animation","Button","variant","type"],"sourceRoot":""}