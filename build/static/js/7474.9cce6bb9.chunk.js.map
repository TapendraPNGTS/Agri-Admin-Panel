{"version":3,"file":"static/js/7474.9cce6bb9.chunk.js","mappings":"oUAoHA,UAvGA,WACE,IAAMA,GAASC,EAAAA,EAAAA,MACTC,GAAWC,EAAAA,EAAAA,MACjB,GAAgCC,EAAAA,EAAAA,YAAU,eAAnCC,EAAQ,KAAEC,EAAW,KAC5B,EAAwBC,EAAAA,SAAe,IAAG,eAAnCC,EAAI,KAAEC,EAAO,KACpB,GAAkCL,EAAAA,EAAAA,WAAS,GAAM,eAA1CM,EAAS,KAAEC,EAAY,KAExBC,EAAa,IAAIC,EAAAA,EAMjBC,GAAiBC,EAAAA,EAAAA,cAAW,iBAAC,+GAEMH,EAAWE,eAAe,CAC7DE,UAAWhB,EAAOiB,KACjB,KAAD,EAF0B,KAAtBC,EAAsB,SAKa,OAAjB,OAAtBA,QAAsB,IAAtBA,GAA4B,QAAN,EAAtBA,EAAwBC,YAAI,WAAN,EAAtB,EAA8BC,MAAY,gBAE1CX,EAAQS,EAAuBC,KAAKA,KAAKE,MACzCf,EAAYY,EAAuBC,KAAKA,KAAKG,UAAU,gDAEhDC,EAAAA,GAAAA,MAAY,0BAAwB,gCAIT,MAJS,0BAG7CC,QAAQC,MAAM,EAAD,IACbF,EAAAA,GAAAA,MAAY,wBAAwB,gEAUX,aAc5B,OAd4B,oBAA3B,WAA4BG,GAAK,yEAEV,OADvBf,GAAa,GACbe,EAAMC,iBAAiB,SACWf,EAAWgB,YAAY,CACvDZ,UAAWhB,EAAOiB,GAClBT,KAAMA,EACNH,SAAUA,IACT,KAAD,EAJuB,KAAnBwB,EAAmB,SAKsC,OAAjB,OAAnBA,QAAmB,IAAnBA,GAAyB,QAAN,EAAnBA,EAAqBV,YAAI,WAAN,EAAnB,EAA2BC,MAAY,iBAChEG,EAAAA,GAAAA,QAAc,uBACdrB,EAAS,YAAa,CAAE4B,SAAS,IAAQ,iDAElCP,EAAAA,GAAAA,MAAY,0BAAwB,6CAE9C,sBAED,OArBAQ,EAAAA,EAAAA,YAAU,WACRjB,GACF,GAAG,KAoBD,SAAC,IAAQ,CAACkB,MAAM,eAAc,UAC5B,kBAAMC,OAAO,IAAKC,SArBf,SAGuB,GAAD,gCAkBgB,WACvC,UAAC,KAAI,CAACC,WAAS,EAACC,QAASC,EAAAA,GAAY,WACnC,SAAC,KAAI,CAACC,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAE,UACtB,UAAC,IAAK,YACJ,SAAC,IAAU,CAACC,UAAQ,qBACpB,SAAC,IAAS,CACRC,WAAS,EACTzB,GAAG,OACH0B,KAAK,OACLC,KAAI,OACJC,MAAOrC,EACPsC,SAAU,SAACC,GAAC,OAAKtC,EAAQsC,EAAEC,OAAOH,MAAM,EACxCI,YAAY,yBAIlB,SAAC,KAAI,CAACX,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAE,UACtB,UAAC,IAAK,YACJ,SAAC,IAAU,CAACC,UAAQ,yBACpB,SAAC,IAAS,CACRC,WAAS,EACTzB,GAAG,WACH0B,KAAK,WACLE,MAAOxC,EACPyC,SAAU,SAACC,GAAC,OAAKzC,EAAYyC,EAAEC,OAAOH,MAAM,EAC5CI,YAAY,4BAKpB,mBACA,mBACA,4BACGvC,GACC,SAAC,IAAO,CAACwC,UAAU,UAEnB,SAAC,IAAM,CAACC,QAAQ,YAAYP,KAAK,SAAQ,kCAQrD,C","sources":["views/utilities/HRM/holiday/edit-holiday.js"],"sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\r\nimport MainCard from \"ui-component/cards/MainCard\";\r\nimport InputLabel from \"ui-component/extended/Form/InputLabel\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { Button, Grid, Stack, TextField } from \"@mui/material\";\r\nimport formatDate from \"../../Date-Formet/date-formet\"\r\nimport { toast } from \"react-hot-toast\";\r\nimport HolidayApi from \"../../../../api/holiday.api\";\r\n\r\nfunction App() {\r\n  const params = useParams();\r\n  const navigate = useNavigate();\r\n  const [occasion, setOccasion] = useState();\r\n  const [date, setDate] = React.useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const holidayApi = new HolidayApi();\r\n\r\n  const handleDateChange = (date) => {\r\n    setDate(date);\r\n  };\r\n\r\n  const getHolidayById = useCallback(async () => {\r\n    try {\r\n      const getHolidayByIdResponse = await holidayApi.getHolidayById({\r\n        holidayId: params.id,\r\n      });\r\n      if (\r\n        getHolidayByIdResponse &&\r\n        getHolidayByIdResponse?.data?.code === 200\r\n      ) {\r\n        setDate(getHolidayByIdResponse.data.data.Date);\r\n        setOccasion(getHolidayByIdResponse.data.data.Occasion);\r\n      } else {\r\n        return toast.error(`Something went wrong!`);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(\"Something went wrong\");\r\n      throw error;\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    getHolidayById();\r\n  }, []);\r\n\r\n      \r\n    async function handleSubmit(event) {\r\n    setIsLoading(true)\r\n    event.preventDefault();\r\n    const editHolidayResponse = await holidayApi.editHoliday({\r\n      holidayId: params.id,\r\n      date: date,\r\n      occasion: occasion,\r\n    });\r\n    if (editHolidayResponse && editHolidayResponse?.data?.code === 200) {\r\n      toast.success(`Added successsfully`);\r\n      navigate(\"/holidays\", { replace: true });\r\n    } else {\r\n      return toast.error(`Something went wrong!`);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <MainCard title=\"Edit Holiday\">\r\n      <form action=\"#\"  onSubmit={handleSubmit}>\r\n        <Grid container spacing={gridSpacing}>\r\n          <Grid item xs={6} md={6}>\r\n            <Stack>\r\n              <InputLabel required>Date</InputLabel>\r\n              <TextField\r\n                fullWidth\r\n                id=\"date\"\r\n                name=\"date\"\r\n                type={`date`}\r\n                value={date}\r\n                onChange={(e) => setDate(e.target.value)}\r\n                placeholder=\"Enter Occasion\"\r\n              />\r\n            </Stack>\r\n          </Grid>\r\n          <Grid item xs={6} md={6}>\r\n            <Stack>\r\n              <InputLabel required>Occasion</InputLabel>\r\n              <TextField\r\n                fullWidth\r\n                id=\"occasion\"\r\n                name=\"occasion\"\r\n                value={occasion}\r\n                onChange={(e) => setOccasion(e.target.value)}\r\n                placeholder=\"Enter Occasion\"\r\n              />\r\n            </Stack>\r\n          </Grid>\r\n        </Grid>\r\n        <br />\r\n        <br />\r\n        <center>\r\n          {isLoading ? (\r\n            <Spinner animation=\"grow\" />\r\n          ) : (\r\n            <Button variant=\"contained\" type=\"submit\">\r\n              Update Holiday\r\n            </Button>\r\n          )}\r\n        </center>\r\n      </form>\r\n    </MainCard>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"names":["params","useParams","navigate","useNavigate","useState","occasion","setOccasion","React","date","setDate","isLoading","setIsLoading","holidayApi","HolidayApi","getHolidayById","useCallback","holidayId","id","getHolidayByIdResponse","data","code","Date","Occasion","toast","console","error","event","preventDefault","editHoliday","editHolidayResponse","replace","useEffect","title","action","onSubmit","container","spacing","gridSpacing","item","xs","md","required","fullWidth","name","type","value","onChange","e","target","placeholder","animation","variant"],"sourceRoot":""}