{"version":3,"file":"static/js/9939.2794006a.chunk.js","mappings":"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","sources":["ui-component/extended/Form/InputLabel.js","views/utilities/Franchise/edit-franchise.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\n// material-ui\nimport { experimentalStyled as styled } from '@mui/material/styles';\nimport { InputLabel as MuiInputLabel } from '@mui/material';\n\nconst BInputLabel = styled((props) => <MuiInputLabel {...props} />, {\n    shouldForwardProp: (prop) => prop !== 'horizontal'\n})(({ theme, horizontal }) => ({\n    color: theme.palette.text.primary,\n    fontWeight: 500,\n    marginBottom: horizontal ? 0 : 8\n}));\n\nconst InputLabel = ({ children, horizontal, ...others }) => (\n    <BInputLabel horizontal={horizontal} {...others}>\n        {children}\n    </BInputLabel>\n);\n\nInputLabel.propTypes = {\n    children: PropTypes.node,\n    horizontal: PropTypes.bool\n};\n\nInputLabel.defaultProps = {\n    horizontal: false\n};\n\nexport default InputLabel;\n","import React, { useState, useEffect } from \"react\";\r\nimport MainCard from \"ui-component/cards/MainCard\";\r\nimport InputLabel from \"ui-component/extended/Form/InputLabel\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  MenuItem,\r\n  Select,\r\n  Stack,\r\n  TextField,\r\n  CircularProgress,\r\n} from \"@mui/material\";\r\nfunction App() {\r\n  const params = useParams();\r\n  const navigate = useNavigate();\r\n  const [name, setName] = React.useState(\"\");\r\n  const [email, setEmail] = React.useState(\"\");\r\n  const [number, setNumber] = React.useState(\"\");\r\n  const [address, setAddress] = React.useState(\"\");\r\n  const [city, setCity] = React.useState(\"\");\r\n  const [state, setState] = React.useState(\"\");\r\n  const [pinCode, setPinCode] = React.useState(\"\");\r\n  const [active, setActive] = React.useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  var myHeaders = new Headers();\r\n  myHeaders.append(\"authkey\", process.env.REACT_APP_AUTH_KEY);\r\n  myHeaders.append(\"Authorization\", \"Bearer \" + localStorage.getItem(\"token\"));\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n  function getFrenciseById() {\r\n    var raw = JSON.stringify({\r\n      adminId: localStorage.getItem(\"userId\"),\r\n      frenchiseId: params.id,\r\n    });\r\n    var requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n    fetch(`${process.env.REACT_APP_API_URL}getFrenciseById`, requestOptions)\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        setName(result.data.Name);\r\n        setEmail(result.data.Email);\r\n        setNumber(result.data.Contact);\r\n        setAddress(result.data.Address);\r\n        setCity(result.data.City);\r\n        setState(result.data.State);\r\n        setPinCode(result.data.PinCode);\r\n        setActive(result.data.Status);\r\n      })\r\n      .catch((error) => console.log(\"error\", error));\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    getFrenciseById();\r\n  }, []);\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    setIsLoading(true);\r\n    var raw = JSON.stringify({\r\n      adminId: localStorage.getItem(\"userId\"),\r\n      status: name,\r\n      frenchiseId: params.id,\r\n    });\r\n    var requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(`${process.env.REACT_APP_API_URL}frenciseCheck`, requestOptions)\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        if (result.code === 200) {\r\n          navigate(\"/franchise-request\");\r\n          toast.success(\"Updated Successfully\", {\r\n            position: toast.POSITION.TOP_CENTER,\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n          });\r\n        } else {\r\n          setIsLoading(false);\r\n        }\r\n      })\r\n      .catch((error) => {});\r\n  }\r\n\r\n  return (\r\n    <MainCard title=\"Edit Franchise\">\r\n      <form action=\"#\" onSubmit={handleSubmit}>\r\n        <Grid container spacing={gridSpacing}>\r\n          <Grid item xs={6} md={6}>\r\n            <Stack>\r\n              <InputLabel required>Name</InputLabel>\r\n              <TextField\r\n                fullWidth\r\n                id=\"state\"\r\n                name=\"state\"\r\n                inputProps={{ maxLength: 30 }}\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n                placeholder=\"Enter State Name\"\r\n              />\r\n            </Stack>\r\n          </Grid>\r\n          <Grid item xs={6} md={6}>\r\n            <Stack>\r\n              <InputLabel required>Email</InputLabel>\r\n              <TextField\r\n                fullWidth\r\n                id=\"state\"\r\n                name=\"state\"\r\n                type=\"email\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                placeholder=\"Enter email address\"\r\n              />\r\n            </Stack>\r\n          </Grid>\r\n          <Grid item xs={6} md={6}>\r\n            <Stack>\r\n              <InputLabel required>Contact</InputLabel>\r\n              <TextField\r\n                fullWidth\r\n                id=\"state\"\r\n                name=\"state\"\r\n                type=\"number\"\r\n                onInput={(e) => {\r\n                  e.target.value = Math.max(0, parseInt(e.target.value))\r\n                    .toString()\r\n                    .slice(0, 10);\r\n                }}\r\n                value={number}\r\n                onChange={(e) => setNumber(e.target.value)}\r\n                placeholder=\"Enter email address\"\r\n              />\r\n            </Stack>\r\n          </Grid>\r\n          <Grid item xs={6} md={6}>\r\n            <Stack>\r\n              <InputLabel required>Address</InputLabel>\r\n              <TextField\r\n                fullWidth\r\n                id=\"address\"\r\n                name=\"address\"\r\n                inputProps={{ maxLength: 30 }}\r\n                value={address}\r\n                onChange={(e) => setAddress(e.target.value)}\r\n                placeholder=\"Enter address\"\r\n              />\r\n            </Stack>\r\n          </Grid>\r\n          <Grid item xs={6} md={6}>\r\n            <Stack>\r\n              <InputLabel required>City</InputLabel>\r\n              <TextField\r\n                fullWidth\r\n                id=\"address\"\r\n                name=\"address\"\r\n                inputProps={{ maxLength: 30 }}\r\n                value={city}\r\n                onChange={(e) => setCity(e.target.value)}\r\n                placeholder=\"Enter address\"\r\n              />\r\n            </Stack>\r\n          </Grid>\r\n          <Grid item xs={6} md={6}>\r\n            <Stack>\r\n              <InputLabel required>State</InputLabel>\r\n              <TextField\r\n                fullWidth\r\n                id=\"address\"\r\n                name=\"address\"\r\n                inputProps={{ maxLength: 30 }}\r\n                value={state}\r\n                onChange={(e) => setState(e.target.value)}\r\n                placeholder=\"Enter address\"\r\n              />\r\n            </Stack>\r\n          </Grid>\r\n          <Grid item xs={6} md={6}>\r\n            <Stack>\r\n              <InputLabel required>Pin Code</InputLabel>\r\n              <TextField\r\n                fullWidth\r\n                id=\"address\"\r\n                name=\"address\"\r\n                inputProps={{ maxLength: 30 }}\r\n                value={pinCode}\r\n                onChange={(e) => setPinCode(e.target.value)}\r\n                placeholder=\"Enter address\"\r\n              />\r\n            </Stack>\r\n          </Grid>\r\n          <Grid item xs={6} md={6}>\r\n            <Stack>\r\n              <InputLabel required>Active</InputLabel>\r\n              <Select\r\n                id=\"active\"\r\n                name=\"active\"\r\n                value={active}\r\n                onChange={(e) => setActive(e.target.value)}\r\n              >\r\n                <MenuItem value=\"Accept\">Accept</MenuItem>\r\n                <MenuItem value=\"Reject\">Reject</MenuItem>\r\n              </Select>\r\n            </Stack>\r\n          </Grid>\r\n        </Grid>\r\n        <br />\r\n        <br />\r\n        <center>\r\n          {isLoading ? (\r\n            <CircularProgress />\r\n          ) : (\r\n            <>\r\n              {/* <Button variant=\"contained\" type=\"submit\"> */}\r\n              Update Franchise\r\n              {/* </Button> */}\r\n            </>\r\n          )}\r\n        </center>\r\n      </form>\r\n    </MainCard>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"names":["BInputLabel","styled","props","shouldForwardProp","prop","theme","horizontal","color","palette","text","primary","fontWeight","marginBottom","InputLabel","children","others","defaultProps","params","useParams","navigate","useNavigate","React","name","setName","email","setEmail","number","setNumber","address","setAddress","city","setCity","state","setState","pinCode","setPinCode","active","setActive","useState","isLoading","setIsLoading","myHeaders","Headers","append","process","localStorage","getItem","raw","JSON","stringify","adminId","frenchiseId","id","requestOptions","method","headers","body","redirect","fetch","then","response","json","result","data","Name","Email","Contact","Address","City","State","PinCode","Status","catch","error","console","log","getFrenciseById","title","action","onSubmit","event","preventDefault","status","code","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","container","spacing","gridSpacing","item","xs","md","required","fullWidth","inputProps","maxLength","value","onChange","e","target","placeholder","type","onInput","Math","max","parseInt","toString","slice"],"sourceRoot":""}